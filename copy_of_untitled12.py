# -*- coding: utf-8 -*-
"""Copy of Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XUUP_qb-DQESAlVE8jT-1FT2X079IRXJ
"""

import matplotlib.pyplot as plt
import numpy as np
def quadratic_model(time):
  a=0.1
  b=-1
  c=30
  temperature = a*(time**2)+b*time+c
  return temperature
def main():
  time_values = np.linspace(0,10,50)
  temperature_hardcoded = quadratic_model(time_values)
  plt.plot(time_values,temperature_hardcoded,label='Hard_coded Coefficients')
  plt.xlabel('Time')
  plt.ylabel('Temperature')
  plt.legend()
  plt.title('Weather modelling with Quadratic equation(hardcoded coefficient)')
  plt.show()
if__name__="main"
main()



import matplotlib.pyplot as plt
import numpy as np
def quadratic_model(time,a,b,c):

  temperature = a*(time**2)+b*time+c
  return temperature
def main():
  time_values = np.linspace(0,10,50)
  a=float(input("enter the value of a:"))
  b=float(input("enter the value of b:"))
  c=float(input("enter the value of c:"))
  temperature_hardcoded = quadratic_model(time_values,a,b,c)
  plt.plot(time_values,temperature_hardcoded,label='Hard_coded Coefficients')
  plt.xlabel('Time')
  plt.ylabel('Temperature')
  plt.legend()
  plt.title('Weather modelling with Quadratic equation(hardcoded coefficient-userinput)')
  plt.show()
if__name__="main"
main()

import matplotlib.pyplot as plt
import numpy as np

def quadratic_model(time, a, b, c):
    temperature = a * (time ** 2) + b * time + c
    return temperature

def main():
    try:
        # Read coefficients from a file (assuming a file named "coefficients.txt")
        with open("coefficients.txt", "r") as file:
            coefficients = file.read().split()
            a = float(coefficients[0])
            b = float(coefficients[1])
            c = float(coefficients[2])

        time_values = np.linspace(0, 20, 50)
        temperature_hardcoded = quadratic_model(time_values, a, b, c)

        plt.plot(time_values, temperature_hardcoded, label='File-defined coefficients')
        plt.xlabel('Time')
        plt.ylabel('Temperature')
        plt.legend()
        plt.title('Weather modeling with quadratic equation (File-defined coefficients)')
        plt.show()

    except FileNotFoundError:
        print("Error: 'coefficients.txt' file not found. Please create it with the coefficients on separate lines.")

if __name__ == "__main__":
    main()

import matplotlib.pyplot as plt
import numpy as np

def quadratic_model(time, a, b, c):
    temperature = a * (time**2) + b * time + c
    return temperature

def main():
    num_sets = int(input("Enter the number of coefficient sets: "))

    coefficient_sets = []
    for i in range(num_sets):
        print(f"\nCoefficient set {i + 1}:")
        a = float(input("Enter the value of a: "))
        b = float(input("Enter the value of b: "))
        c = float(input("Enter the value of c: "))
        coefficient_sets.append((a, b, c))

    time_values = np.linspace(0, 10, 100)  # Increase number of points for smoother curves

    plt.figure()  # Matplotlib will determine default figure size

    for i, (a, b, c) in enumerate(coefficient_sets):
        temperature = quadratic_model(time_values, a, b, c)
        plt.plot(time_values, temperature, label=f'Set {i+1}: a={a}, b={b}, c={c}')

    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.legend()
    plt.title('Weather Modelling with Quadratic Equation (Multiple Sets of Coefficients)')

    # Disable grid
    plt.grid(False)

    plt.show()

if __name__ == '__main__':
    main()

import matplotlib.pyplot as plt
import numpy as np
from google.colab import files

def quadratic_model(time, a, b, c):
    temperature = a * (time ** 2) + b * time + c
    return temperature

def main():
    try:
        # Upload files to Colab
        uploaded = files.upload()

        # Read coefficients from uploaded files
        for filename in uploaded.keys():
            with open(filename, "r") as file:
                lines = file.readlines()
                if len(lines) % 3 != 0:
                    print(f"Error: Number of lines in {filename} should be a multiple of 3.")
                    continue

                time_values = np.linspace(0, 10, 50)
                plt.figure()
                for i in range(0, len(lines), 3):
                    a = float(lines[i].strip())
                    b = float(lines[i + 1].strip())
                    c = float(lines[i + 2].strip())

                    temperature_hardcoded = quadratic_model(time_values, a, b, c)
                    plt.plot(time_values, temperature_hardcoded, label=f'Set {i//3 + 1}: a={a}, b={b}, c={c}')

                plt.xlabel('Time')
                plt.ylabel('Temperature')
                plt.legend()
                plt.title(f'Weather modeling with quadratic equation (File {filename})')
                plt.show()

    except Exception as e:
        print(f"Error: {str(e)}")

if __name__ == "__main__":
    main()